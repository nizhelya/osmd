/*
 * File: app/controller/AppNach.js
 * Date: Tue May 26 2020 21:17:25 GMT+0300 (EEST)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Osmd.controller.AppNach', {
    extend: 'Ext.app.Controller',

    refs: {
        WinAddLgotaPerer: '#winAddLgotaPerer',
        WinEditOplata: '#winEditOplata',
        WinEditDbfLgota: '#winEditDbfLgota',
        winImport: {
            selector: 'winImport',
            xtype: 'winimport'
        },
        WinAddLgotaPerer: '#winAddLgotaPerer'
    },

    control: {
        "#tabNachApp": {
            activate: 'onTabNachAppActivate'
        },
        "#tabOplata": {
            activate: 'onTabOplataActivate'
        },
        "#exportBudjet": {
            activate: 'onExportBudjetActivate'
        },
        "#tabDbfLgota": {
            activate: 'onTabDbfLgotaActivate'
        },
        "#tabSubsidia": {
            activate: 'onTabSubsidiaActivate'
        },
        "#tabKvartplata": {
            activate: 'onTabKvartplataActivate'
        },
        "#tabSubsUtszn": {
            activate: 'onTabSubsUtsznActivate'
        },
        "#tabLgotaUtszn": {
            activate: 'onTabLgotaUtsznActivate'
        },
        "#grNachKvartplata": {
            selectionchange: 'onGrNachKvartplataSelectionChange'
        },
        "#grLgotaNachKvartplata": {
            selectionchange: 'onGrLgotaNachKvartplataSelectionChange'
        },
        "#btAddLgotaPerer": {
            click: 'onBtAddLgotaPererClick'
        },
        "#btExportBudjet": {
            click: 'onBtExportBudjetClick'
        },
        "#btControlLgot": {
            click: 'onBtControlLgotClick'
        },
        "#btControlDbfLgot": {
            click: 'onBtControlDbfLgotClick'
        },
        "#btFixDolg": {
            click: 'onBtFixDolgClick'
        },
        "#btEditOplata": {
            click: 'onBtEditOplataClick'
        },
        "#grTarifHousesKv": {
            selectionchange: 'onGrTarifHousesKvSelectionChange'
        },
        "#grSubsidia": {
            selectionchange: 'onGrSubsidiaSelectionChange'
        },
        "#btEditDbfLgota": {
            click: 'onBtEditDbfLgotaClick'
        },
        "#tabPrivatBank": {
            activate: 'onTabPrivatBankActivate'
        }
    },

    onTabNachAppActivate: function(component, eOpts) {
        //STORE
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachKvartplata');
        var stUser = Ext.data.StoreManager.get("StUser");
        var stAppartment = Ext.data.StoreManager.get("StAppartment");

        var fmInfoNachApp = Ext.getCmp('fmInfoNachApp');
        var fmBti = Ext.getCmp('fmBti');

        fmInfoNachApp.getForm().reset();
        fmBti.getForm().reset();
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);

        stAppartment.load({
            params: {
                what_id: values.get('address_id'),
                address_id:  values.get('address_id'),
                what:'Appartment',
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){


                if(success){

                    if (records.length) {
                        fmInfoNachApp.getForm().loadRecord(records[0]);

                        var adrec = fmInfoNachApp.getForm().findField('address').getValue();
                        var fio = fmInfoNachApp.getForm().findField('nanim').getValue();
                        var kod = fmInfoNachApp.getForm().findField('address_id').getValue();

                        fmBti.getForm().loadRecord(records[0]);


                        fmInfoNachApp.setTitle('ид&nbsp;&nbsp'+ kod + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                                               adrec + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +  fio);

                    }
                }
            },
            scope:this
        });

        StTekNach.load({
            params: {
                what:'KvartplataApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                    //  console.log(fmInfoNachApp.getForm());
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    // fmInfoNachApp.getForm().reset();
                }
            },
            scope:this
        });
        StLgotaNach.load({
            params: {
                what:'LgotaNachKvartplata',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });

    },

    onTabOplataActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //console.log(stUser);

        var StOplata = Ext.data.StoreManager.get("StOplata");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);

        StOplata.load({
            params: {
                what:'OplataApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            scope:this
        });

    },

    onExportBudjetActivate: function(component, eOpts) {
        var form = Ext.getCmp('fmExportBudjet');
        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        form.getForm().findField('subjectTo').setValue('utszn5139@ukr.net');
        form.getForm().findField('subjectFrom').setValue('svtpashkova@gmail.com');

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = 'utszn';

    },

    onTabDbfLgotaActivate: function(component, eOpts) {
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var dataNachSubsidia = Ext.getCmp('dataNachLgota');
        var osmd_id = values.get('osmd_id');
        var dt = new Date() ;
        dt.setDate(dt.getDate() - 28);
        dt.getDate();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        dataNachSubsidia.setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        var data = dataNachSubsidia.getValue();

        if(osmd_id){

        var StSubsidia = Ext.data.StoreManager.get("StDbfLgota");
        var btnGetSubsidiaOshadBank =  Ext.getCmp('btnGetLgotaOshadBank');
        var btnPrintLgotaReestrToOshadBank =  Ext.getCmp('btnPrintLgotaReestrToOshadBank');
        var btnPrintLgotaReestrFromOshadBank =  Ext.getCmp('btnPrintLgotaReestrFromOshadBank');

        var btnImportOshadBank =  Ext.getCmp('btnImportOshadBankLgota');
        var btnExportOshadBank =  Ext.getCmp('btnExportOshadBankLgota');
        var btnImportOplataOshad =  Ext.getCmp('btnImportOplataOshadLgota');
        var btnImportOplataOsmd =  Ext.getCmp('btnImportOplataOsmdLgota');
        var btnSubsidiaOtkatOsmd =  Ext.getCmp('btnLgotaOtkatOsmd');


            btnGetSubsidiaOshadBank.setDisabled(false);
            btnPrintLgotaReestrToOshadBank.setDisabled(false);
            btnPrintLgotaReestrFromOshadBank.setDisabled(false);
            btnImportOshadBank.setDisabled(false);
            btnExportOshadBank.setDisabled(false);
            btnImportOplataOshad.setDisabled(false);
            btnImportOplataOsmd.setDisabled(false);
            btnSubsidiaOtkatOsmd.setDisabled(false);



            StSubsidia.load({
                params: {
                    what:'getDbfLgota',
                    login:login,
                    password:password,
                    data:data,
                    osmd_id: osmd_id
                },
                scope:this
            });
        }

    },

    onTabSubsidiaActivate: function(component, eOpts) {
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var dataNachSubsidia = Ext.getCmp('dataNachSubsidia');
        var osmd_id = values.get('osmd_id');
        var dt = new Date() ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        dataNachSubsidia.setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        var data = dataNachSubsidia.getValue();

        if(osmd_id){

            var StSubsidia = Ext.data.StoreManager.get("StSubsidia");
            var btnGetSubsidiaOshadBank =  Ext.getCmp('btnGetSubsidiaOshadBank');
            var btnPrintSubsReestrToOshadBank =  Ext.getCmp('btnPrintSubsReestrToOshadBank');
            var btnPrintSubsReestrFromOshadBank =  Ext.getCmp('btnPrintSubsReestrFromOshadBank');

            var btnImportOshadBank =  Ext.getCmp('btnImportOshadBank');
            var btnExportOshadBank =  Ext.getCmp('btnExportOshadBank');
            var btnImportOplataOshad =  Ext.getCmp('btnImportOplataOshad');
            var btnImportOplataOsmd =  Ext.getCmp('btnImportOplataOsmd');
            var btnSubsidiaOtkatOsmd =  Ext.getCmp('btnSubsidiaOtkatOsmd');


            btnGetSubsidiaOshadBank.setDisabled(false);
            btnPrintSubsReestrToOshadBank.setDisabled(false);
            btnPrintSubsReestrFromOshadBank.setDisabled(false);

            btnImportOshadBank.setDisabled(false);
            btnExportOshadBank.setDisabled(false);
            btnImportOplataOshad.setDisabled(false);
            btnImportOplataOsmd.setDisabled(false);
            btnSubsidiaOtkatOsmd.setDisabled(false);



            StSubsidia.load({
                params: {
                    what:'getSubsidia',
                    login:login,
                    password:password,
                    data:data,
                    osmd_id: osmd_id
                },
                scope:this
            });
        }

    },

    onTabKvartplataActivate: function(component, eOpts) {
        //STORE
        var form = Ext.getCmp('fmKvartplata');
        var btAddNach = Ext.getCmp('btAddNachKv');
        var grid = Ext.getCmp('grTarifHousesKv');
        var store = grid.getStore();
        store.removeAll();
        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        form.getForm().reset();
        form.getForm().findField('data_nach').setValue(firstDay);
        btAddNach.setText("Начислить квартплату за период   "+ Ext.Date.format(firstDay, 'F,Y'));


    },

    onTabSubsUtsznActivate: function(component, eOpts) {

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var osmd_id = values.get('osmd_id');
        var form = Ext.getCmp('fmSubsUtszn');
        var dt = new Date();
        var firstDay =Ext.Date.add(dt, Ext.Date.DAY, -10);
        var data_nach = form.getForm().findField('data_nach').getValue();



        if(osmd_id){
            var grid = Ext.getCmp('grSubsUtszn');
            var store = grid.getStore();
            var btnGetLgotaUtszn =  Ext.getCmp('btnGetSubsidiaUtszn');
            var btnPrintLgotaUtszn =  Ext.getCmp('btnPrintSubsidiaUtszn');
            var btnReestrSubsidiaUtszn =  Ext.getCmp('btnReestrSubsidiaUtszn');
            var btSubsInsOplata =  Ext.getCmp('btSubsInsOplata');
            var btnSubsidiaOtkat =  Ext.getCmp('btnSubsidiaOtkat');

            btnGetLgotaUtszn.setDisabled(false);
            btnPrintLgotaUtszn.setDisabled(false);
            btnReestrSubsidiaUtszn.setDisabled(false);
            btSubsInsOplata.setDisabled(false);
            btnSubsidiaOtkat.setDisabled(false);



            store.load({
                params: {
                    what:'getSubsidiaUtszn',
                    login:login,
                    password:password,
                    data:data_nach,
                    osmd_id: osmd_id
                },
                scope:this
            });
        }


    },

    onTabLgotaUtsznActivate: function(component, eOpts) {
        var house_id = 0;
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var osmd_id = values.get('osmd_id');
        var form = Ext.getCmp('fmLgotaUtszn');
        var dt = new Date();
        var firstDay =Ext.Date.add(dt, Ext.Date.DAY, -10);
        var data_nach = form.getForm().findField('data_nach').getValue();



        if(osmd_id){
            var grid = Ext.getCmp('grLgotaUtszn');
            var store = grid.getStore();
            var btnGetLgotaUtszn =  Ext.getCmp('btnGetLgotaUtszn');
            var btnPrintLgotaUtszn =  Ext.getCmp('btnPrintLgotaUtszn');
            var btnPrintLgotaReestrUtszn =  Ext.getCmp('btnPrintLgotaReestrUtszn');
            var btLgotaInsOplata =  Ext.getCmp('btLgotaInsOplata');
            var btnLgotaOtkat =  Ext.getCmp('btnLgotaOtkat');

            btnGetLgotaUtszn.setDisabled(false);
            btnPrintLgotaUtszn.setDisabled(false);
            btnPrintLgotaReestrUtszn.setDisabled(false);
            btLgotaInsOplata.setDisabled(false);
            btnLgotaOtkat.setDisabled(false);


            store.load({
                params: {
                    what:'getLgotaUtszn',
                    login:login,
                    password:password,
                    data:data_nach,
                    osmd_id: osmd_id
                },
                scope:this
            });
        }
    },

    onGrNachKvartplataSelectionChange: function(model, selected, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StLgotaNachVoda = Ext.data.StoreManager.get("StLgotaNachVoda");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var form = Ext.getCmp('fmInfoNachApp');
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            StLgotaNachVoda.load({
                params: {
                    what:'LgotaNachKvartplataData',
                    address_id: values.get('address_id'),
                    data:Ext.Date.format(selected[0].data.data,"Ymd"),
                    login:values.get('login'),
                    password:values.get('password')
                },
                scope:this
            });
        }
    },

    onGrLgotaNachKvartplataSelectionChange: function(model, selected, eOpts) {
        var form = Ext.getCmp('fmInfoNachApp');
        if (selected.length > 0) {
            form.getForm().findField('msq_lgota').setValue(selected[0].data.info);

        }
    },

    onBtAddLgotaPererClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER
        var value = button.findParentByType('form').getValues();
        //STORE
        if (value.summa !== "0") {
            var stUser = Ext.data.StoreManager.get("StUser");
            var values =stUser.getAt(0);
            var vibor = values.get('vibor');
            this.getWinAddLgotaPerer().close();
            switch (vibor){
                case 'addLgotaVodaPerer':
                    me.addLgotaPererVoda(value);
                    break;
                case 'addLgotaStokiPerer':
                    me.addLgotaPererStoki(value);
                    break;
                case 'addLgotaPodogrevPerer':
                    me.addLgotaPererPodogrev(value);
                    break;
                case 'addLgotaOtopleniePerer':
                    me.addLgotaPererOtoplenie(value);
                    break;
                case 'addLgotaKvartplataPerer':
                    me.addLgotaPererKvartplata(value);
                    break;
                case 'addLgotaTboPerer':
                    me.addLgotaPererTbo(value);
                    break;
                case 'addLgotaVoda':
                    me.addLgotaVoda(value);
                    break;
                case 'addLgotaStoki':
                    me.addLgotaStoki(value);
                    break;
                case 'addLgotaPodogrev':
                    me.addLgotaPodogrev(value);
                    break;
                case 'addLgotaOtoplenie':
                    me.addLgotaOtoplenie(value);
                    break;
                case 'addLgotaKvartplata':
                    me.addLgotaKvartplata(value);
                    break;
                case 'addLgotaTbo':
                    me.addLgotaTbo(value);
                    break;
                case 'editLgotaVoda':
                    me.editLgotaVoda(value);
                    break;
                case 'editLgotaStoki':
                    me.editLgotaStoki(value);
                    break;
                case 'editLgotaPodogrev':
                    me.editLgotaPodogrev(value);
                    break;
                case 'editLgotaOtoplenie':
                    me.editLgotaOtoplenie(value);
                    break;
                case 'editLgotaKvartplata':
                    me.editLgotaKvartplata(value);
                    break;
                case 'editLgotaTbo':
                    me.editLgotaTbo(value);
                    break;
            }
        } else {
            Ext.MessageBox.show({
                title: 'Контроль данных',
                msg: 'Введите правильную сумму',
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
        }
    },

    onBtExportBudjetClick: function(button, e, eOpts) {
        // in use
        var value = button.findParentByType('form').getValues();
        //var winExportLgota = Ext.ClassManager.instantiateByAlias('widget.winexportlgota');
        var win = button.findParentByType('window');
        var form = button.findParentByType('form');
        var vibor = form.getForm().findField('vibor').getValue();
        var what = "ExportEmail";
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),

            what:"ExportEmail"
        };
        //console.log(value);

        //LOGIKA

        Ext.Object.merge(value, params);
        //LOGIKA

        var myMask = Ext.Msg.show({
            title:'Отправка почты...',
            msg: 'Отправка файла по Email.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });


        QueryExport.exportToEmail(value,function(results){
            if(results.success){
                myMask.close();
                win.close();
                Ext.MessageBox.show({
                    title: 'Отправка файла по Email',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });

            } else {
                myMask.close();
                win.close();

                Ext.MessageBox.show({
                    title: 'Отправка файла по Email',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });

            }

        });

    },

    onBtControlLgotClick: function(button, e, eOpts) {
        // in use
        var value = button.findParentByType('form').getValues();
        var tabPnCenter =  Ext.getCmp('tabPnCenter');
        var report = 'controlLgot';
        var namereport = 'Контроль льгот';
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var tab = tabPnCenter.child('#'+report);
        if (!tab) {
            tab  = tabPnCenter.add({
                xtype:'tabReportOrg',
                title:namereport,
                id:''+report+''
            });

        }
        var reppan = tab.getComponent(0);
        tabPnCenter.setActiveTab(tab);

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"controlLgot",
            report:report
        };

        //LOGIKA
        Ext.Object.merge(value, params);

        var myMask = Ext.Msg.show({
            title:'Отчеты...',
            msg: 'Загрузка отчета.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryReport.getResults(value,function(results){
            if (results.success==="1"){
                myMask.close();
                reppan.update(results.content);
                Ext.REPORTCONTENT =results.content;
                Ext.REPORTSQL =results.sql;
                Ext.REPORTTITLE =report;
            }else{
                myMask.close();
                Ext.MessageBox.show({title: namereport,
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });


    },

    onBtControlDbfLgotClick: function(button, e, eOpts) {
        // in use

        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StDbfLgota = Ext.data.StoreManager.get("StDbfLgota");

        //COMPONENT
        var form = button.findParentByType('form');
        var value = form.getValues();

        var tabPnCenter =  Ext.getCmp('tabPnCenter');
        var tab = tabPnCenter.child('#tabDbfLgota');
        var usluga =form.getForm().findField('rbUsluga').inputValue;
        StDbfLgota.proxy.setExtraParam('what', usluga);

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"ExportBudjetEmail"
        };
        //LOGIKA
        Ext.Object.merge(value, params);

        var myMask = Ext.Msg.show({
            title:'Загрузка ДБФ файла',
            msg: 'Загрузка ДБФ файла со списком льготников.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });


        QueryAddress.updateRecords(value,function(result){
            if(result.success==="1"){
                StDbfLgota.load({
                    params: {
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            if (!tab) {
                                tab  = tabPnCenter.add({
                                    xtype:'tabDbfLgota'
                                });

                            }
                            myMask.close();
                            tabPnCenter.setActiveTab(tab);

                        }else {
                            myMask.close();

                        }
                    },
                    scope:this
                });

            } else {
                myMask.close();

                Ext.MessageBox.show({
                    title: 'Загрузка ДБФ файла ',
                    msg: result.msg,
                    buttons: Ext.MessageBox.OK,

                    icon: Ext.MessageBox.ERROR
                });

            }
        });

    },

    onBtFixDolgClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var value = button.findParentByType('form').getValues();
        //console.log(value);
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"fixDolgTeplo",
            fdata:value.fixdata

        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Фиксация задолженности...',
            msg: 'Фиксация задолженности.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Фиксация задолженности',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Фиксация задолженности',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtEditOplataClick: function(button, e, eOpts) {
        var value = button.findParentByType('form').getValues();
        var form = button.findParentByType('form');
        var oplata = 0;
        var kvartplata = form.getForm().findField('kvartplata').getValue();
        var remont = form.getForm().findField('remont').getValue();

        var otoplenie = form.getForm().findField('otoplenie').getValue();
        var ptn = form.getForm().findField('ptn').getValue();

        var podogrev = form.getForm().findField('podogrev').getValue();
        var voda = form.getForm().findField('voda').getValue();
        var stoki = form.getForm().findField('stoki').getValue();
        var tbo = form.getForm().findField('tbo').getValue();
        var summa = parseFloat(form.getForm().findField('summa').getValue()).toFixed(2);
        oplata =parseFloat(kvartplata + remont+ otoplenie + ptn +  podogrev + voda + stoki + tbo).toFixed(2);

        if(summa === oplata) {
            if (summa !== "0") {
                var stUser = Ext.data.StoreManager.get("StUser");
                var values =stUser.getAt(0);
                var vibor = values.get('vibor');
                this.getWinEditOplata().close();
                this.editOplataApp(value);

            } else {
                Ext.MessageBox.show({
                    title: 'Контроль данных',
                    msg: 'Оплата равна 0',
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        } else {
            Ext.MessageBox.show({
                title: 'Контроль данных',
                msg: 'Не совпадают правая и левая части оплаты',
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
        }

    },

    onGrTarifHousesKvSelectionChange: function(model, selected, eOpts) {
        //STORE

        var stAddress = Ext.data.StoreManager.get('StAddressOrg');
        var form = Ext.getCmp('fmKvartplata');
        var btAddPerer = Ext.getCmp('btAddPererKv');
        var btAddNachKvPrev = Ext.getCmp('btAddNachKvPrev');

        var viborTarif = Ext.getCmp('cbTarifKv');
        var btAddNach = Ext.getCmp('btAddNachKv');
        var btAddNachRemont = Ext.getCmp('btAddNachRemont');
        var btAddNachDop = Ext.getCmp('btAddNachDop');

        var btnClearNach = Ext.getCmp('btnClearNachKv');
        var btnInsTarif = Ext.getCmp('btnInsTarifKv');
        var tarif = Ext.getCmp('tarKv');

        var dt = new Date();
        var lastDay = Ext.Date.getLastDateOfMonth( dt ) ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        //console.log(selected);
        if (selected.length > 0) {
            form.getForm().loadRecord(selected[0]);

            form.getForm().findField('sdata').setValue(Ext.Date.format(Ext.Date.getFirstDateOfMonth(selected[0].data.data), 'Y-m-d'));
            form.getForm().findField('fdata').setValue(Ext.Date.format( Ext.Date.getLastDateOfMonth(selected[0].data.data), 'Y-m-d'));
            form.getForm().findField('address_ot').clearValue();
            form.getForm().findField('address_do').clearValue();
            form.getForm().findField('allkv').setValue(1);
            form.getForm().findField('tarif_manual').setValue(0);
            form.getForm().findField('ch_kv9').setValue(form.getForm().findField('kv9').getValue());
            form.getForm().findField('ch_kv9f1').setValue(form.getForm().findField('kv9f1').getValue());
            form.getForm().findField('ch_kv16').setValue(form.getForm().findField('kv16').getValue());
            form.getForm().findField('ch_kv16f1').setValue(form.getForm().findField('kv16f1').getValue());

            if (Ext.Date.format(Ext.Date.getFirstDateOfMonth(selected[0].data.data), 'Y-m-d') ==
                Ext.Date.format(Ext.Date.getFirstDateOfMonth(form.getForm().findField('data_nach').getValue()), 'Y-m-d')) {
                btAddNach.setDisabled(false);
                btAddNachDop.setDisabled(false);
                btAddNachRemont.setDisabled(false);

                btnClearNach.setDisabled(false);
                btAddPerer.setDisabled(true);
                btAddNachKvPrev.setDisabled(false);
                btnInsTarif.setDisabled(false);


                viborTarif.clearValue();
                viborTarif.setDisabled(false);
            }else{
                btAddNach.setDisabled(true);
                btnClearNach.setDisabled(true);
                btAddNachDop.setDisabled(true);
                btAddNachRemont.setDisabled(true);

                btAddPerer.setDisabled(false);
                btAddNachKvPrev.setDisabled(true);
                viborTarif.setDisabled(true);
                btnInsTarif.setDisabled(true);
            }
            tarif.setValue(0);


            stAddress.removeAll();
            stAddress.load({
                params: {
                    what:'AddressFromHousesTarif',
                    what_id: selected[0].data.house_id
                },
                callback: function(records,operation,success){
                    if(success){
                        form.getForm().findField('address_ot').setValue(records[0].get('address_id'));
                        form.getForm().findField('address_do').setValue(records[0].get('address_id'));
                    }

                },
                scope:this
            });

        }

    },

    onGrSubsidiaSelectionChange: function(model, selected, eOpts) {
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var btnControlSummaSubsid = Ext.getCmp('btnControlSummaSubsid');
        var btnSubsidiaOtkat = Ext.getCmp('btnSubsidiaOtkat');

        if (selected.length > 0) {
            values.set({'osmd_id':selected[0].data.osmd_id});


            btnControlSummaSubsid.setDisabled(false);
            btnSubsidiaOtkat.setDisabled(false);
        }

    },

    onBtEditDbfLgotaClick: function(button, e, eOpts) {



        var value = button.findParentByType('form').getValues();
        var dataNachDbfLgota = Ext.getCmp('dataNachDbfLgota');

        var form = button.findParentByType('form');
        var StDbfLgota = Ext.data.StoreManager.get("StDbfLgota");
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = value.vibor;
        this.getWinEditDbfLgota().close();
        var what = "editDbfLgota";

        switch (vibor) {
            case "add":
                what = "addDbfLgota";
                break;
            case "edit":
                what ="editDbfLgota";
        }

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            osmd_id: values.get('osmd_id'),

            what:what
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  по оплате',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StDbfLgota.load({
                    params: {
                        login:values.get('login'),
                        password:values.get('password'),
                        data:dataNachDbfLgota.getValue(),
                        osmd_id: values.get('osmd_id'),
                        what:"getDbfLgota"

                    },

                    scope:this
                });

            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  по оплате',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onTabPrivatBankActivate: function(component, eOpts) {
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');

        var osmd_id = values.get('osmd_id');
        //console.log(osmd_id);

        var stPrivatBank = Ext.data.StoreManager.get("StPrivatBank");
        var grid = Ext.getCmp('grPrivatBank');
        var controlOplataPrivat =  Ext.getCmp('controlOplataPrivat');
        var btnExportPrivatBank =  Ext.getCmp('btnExportPrivatBank');
        var insReestrPrivatToOplata =  Ext.getCmp('insReestrPrivatToOplata');
        var btnImportPrivatBank =  Ext.getCmp('btnImportPrivatBank');
        if(osmd_id){
            controlOplataPrivat.setDisabled(false);
            btnExportPrivatBank.setDisabled(false);
            insReestrPrivatToOplata.setDisabled(false);
            btnImportPrivatBank.setDisabled(false);

            stPrivatBank.load({
                params: {
                    what:'getPrivatBank',
                    login:login,
                    password:password,
                    osmd_id: osmd_id
                },
                scope:this
            });
        }

    },

    addLgotaPererKvartplata: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppKvartplata');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPererKvartplata"
        };

        //GRID
        var grNach = Ext.getCmp('grNachKvartplata');

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'KvartplataApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(0);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    editLgotaKvartplata: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppKvartplata');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotaKvartplata"
        };

        //GRID
        var grNach = Ext.getCmp('grNachKvartplata');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'KvartplataApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaKvartplata: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppKvartplata');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaKvartplata"
        };

        //GRID
        var grNach = Ext.getCmp('grNachKvartplata');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'KvartplataApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    editOplataApp: function(value) {
        // in use
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StOplata = Ext.data.StoreManager.get("StOplata");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"editOplataApp"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  по оплате',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StOplata.load({
                    params: {
                        what:'OplataApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  по оплате',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });

    }

});
